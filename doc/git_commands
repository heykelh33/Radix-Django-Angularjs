Para crear el repositorio git:
    git init

Para agregar los ficheros al repositorio:
    git add djangoSensors/* 
    
Para hacer un commit. Entre "comillas" va el comentario:
    git commit -m "sensor_layer" -a

Para subir al repositorio los cambios realizados:
    git push -u origin --all

Para revisar las diferentes branches que estan creadas:
    git branch
    
Para chequear las actualizaciones en las diferentes branches y hacer una actualizacion:
    git fetch && git checkout [branch name]
    
Despues de esto se puede hacer la actualizacion con un pull:
    git pull
    
Para configurar:
    git config --global user.name "Your Name"
    git config --global user.email you@example.com
    
Si se da:
    git commit -a
El git se olvida de los problemas del merge, lo que despues hay que revisar las diferencias.

Para estos problemas de merge tambien puede hacerse:    
    Via 1- You can either commit your changes before you do the merge, or you stash them:

        git stash
        git merge origin/master
        git stash pop
        
        Explicacion:
        If you want remove all local changes from your working copy, simply stash them: 
            $git stash save --keep-index
        If you don't need them anymore, you now can drop that stash:
            $git stash drop
        
    Via 2- 
        git checkout HEAD^ file/to/overwrite
        git pull
        
    Via 3-
        git commit -m "My message"
        
    Via 4- Discard the local changes using: 
        git reset --hard
        
Reference: 
http://stackoverflow.com/questions/14318234/how-to-ignore-error-on-git-pull-about-my-local-changes-would-be-overwritten-by-m

Para eliminar del git todos los .pyc:

    1- Remove .pyc files using git rm *.pyc. If this not work use git rm -f *.pyc
    2- Commit git commit -a -m 'all pyc files removed'
    3- Push git push
    4- In future commits you can ignore .pyc files by creating a .gitignore file
        4.1- $sudo nano ~/.gitignore
        4.2- Escribir *.pyc (Tambien es recomendable agregar *~ y *.swp)
        4.3- $git config --global core.excludesfile ~/.gitignore
        (Estos pasos no solamente eliminan los .pyc del proyecto actual, sino de todos los proyectos con git.)


